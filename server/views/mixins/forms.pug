- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, propertyLabel, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyLabel
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, propertyLabel, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyLabel
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, propertyLabel, options = [], errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyLabel
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)
      each option in options
        - const selected = _.get(entity, propertyName) === option.value
        option(value=option.value selected=selected)= option.label
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin multiple(entity, propertyName, propertyLabel, options = [], errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyLabel
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      multiple
    )&attributes(attributes)
      each option in options
        - const selected = _.get(entity, propertyName).includes(option.value)
        option(value=option.value selected=selected)= option.label
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin search(entity, propertyName, propertyLabel, options = [], errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyLabel
    select(
      id= inputId
      name=propertyName
      class=classLine
    )&attributes(attributes)
      each option in options
        - const selected = _.get(entity, propertyName) === option.value
        option(value=option.value selected=selected)= option.label
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin checkbox(entity, propertyName, propertyLabel, errors = {})
    - propertyErrors = _.get(errors, propertyName)
    - classLine = 'form-check-input' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
    - inputId = getInputId(propertyName)
    .mb-3(class=(errors[propertyName] && 'has-danger'))
        label.form-check-label(
        for= inputId
        )= propertyLabel
        input.form-check-input(
            id= inputId
            name=propertyName
            class=classLine
            type='checkbox'
            checked=_.get(entity, propertyName) === 'on'
        )&attributes(attributes)

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
